# - *- coding: utf- 8 - *-
from aiogram import types
from aiogram.dispatcher import FSMContext
from filters import IsAdmin
from keyboards.default import get_settings_func, payment_default, get_functions_func, items_default, admins
from keyboards.inline import choice_way_input_payment_func
from loader import dp, bot
from utils import get_dates
from utils.db_api.sqlite import *
from main import lang

# -----------------------------------------------------–ü–µ—Ä–µ–≤–µ–¥–µ–Ω------------------------------------------------------------



# –†–∞–∑–±–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–∏–ª–µ—Ç–∞–ª–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ—Ç –¢–ì
def split_messages(get_list, count):
    return [get_list[i:i + count] for i in range(0, len(get_list), count)]



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
@dp.message_handler(IsAdmin(), text=["Settings"], state="*")
async def settings_bot(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("‚öô Basic bot Settings.", reply_markup=get_settings_func(message.from_user.id))

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text=["Functions"], state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("Select the desired function.", reply_markup=get_functions_func(message.from_user.id))


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–û–±—â–∏–µ —Ñ—É–Ω–∫—Ü–∏–∏"
@dp.message_handler(IsAdmin(), text=["Info"], state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    about_bot = get_about_bot(message.from_user.id)
    await message.answer(about_bot)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"
@dp.message_handler(IsAdmin(), text=["Product Management","üí∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞–º–∏"], state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("üí∞ Editing products, positions and categories üìú",
                            reply_markup=items_default(message.from_user.id))

# –ü–æ–ª—É—á–µ–Ω–∏–µ –ë–î
@dp.message_handler(IsAdmin(), text="/getbd", state="*")
async def general_functions(message: types.Message, state: FSMContext):
    await state.finish()
    for admin in admins:
        with open("data/botBD.sqlite", "rb") as doc:
            await bot.send_document(admin,
                                    doc,
                                    caption=f"<b>üì¶ BACKUP</b>\n"
                                            f"<code>üïú {get_dates()}</code>")


def get_about_bot(user_id):
    show_profit_day = 0
    show_profit_all = 0
    get_settings = get_settingsx()
    all_purchases = get_all_purchasesx()
    show_users = get_all_usersx()
    for purchase in all_purchases:
        show_profit_all += round(float(purchase[6]),2)
        if float(get_settings[4]) - float (purchase[14]) < 86400:
            show_profit_day += round(float(purchase[6]), 2)
    message = "<b>üì∞ –í–°–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø –û –ë–û–¢–ï</b>\n" \
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
            f"<b>üî∂ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: üî∂</b>\n" \
            f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: <code>{len(show_users)}</code>\n" \
            f"‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n" \
            f"<b>üî∂ –°—Ä–µ–¥—Å—Ç–≤–∞ üî∂</b>\n" \
            f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –∑–∞ 24—á: <code>{round(show_profit_day,2)}$</code>\n"\
            f"üí∞ –ü—Ä–æ–¥–∞–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞: <code>{round(show_profit_all,2)}$</code>\n"
    return message


# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        if lang(message.from_user.id)=='Eng':
            await message.answer("<b>üí∞ All items</b>\n"
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                "<code>üìç ID item - item data</code>\n"
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
        else:
            await message.answer("<b>üí∞ –í—Å–µ —Ç–æ–≤–∞—Ä—ã</b>\n"
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n"
                                "<code>üìç –∞–π–¥–∏ —Ç–æ–≤–∞—Ä–∞ - –¥–∞–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä–∞</code>\n"
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
        for item in get_items:
            save_items.append(f"<code>üìç {item[1]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
        if lang(message.from_user.id)=='Eng':
            await message.answer("<b>üí∞ Items are missing</b>")
        else:
            await message.answer("<b>üí∞ –¢–æ–≤–∞—Ä—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –ø–æ–∑–∏—Ü–∏–π
@dp.message_handler(IsAdmin(), text="/getposition", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_positionsx()
    len_items = len(get_items)
    if len_items >= 1:
        if lang(message.from_user.id)=='Eng':
            await message.answer("<b>üìÅ All positions</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
        else:
            await message.answer("<b>üìÅ –í—Å–µ –ø–æ–∑–∏—Ü–∏–∏</b>\n‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
        for item in get_items:
            save_items.append(f"<code>{item[2]}</code>")
        if len_items >= 35:
            count_split = round(len_items / 35)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
        if lang(message.from_user.id)=='Eng':
            await message.answer("<b>üìÅ There are no positions</b>")
        else:
            await message.answer("<b>üìÅ –ü–æ–∑–∏—Ü–∏–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç</b>")    


# –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–¥—Ä–æ–±–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤
@dp.message_handler(IsAdmin(), text="/getinfoitems", state="*")
async def get_chat_id(message: types.Message, state: FSMContext):
    await state.finish()
    save_items = []
    count_split = 0
    get_items = get_all_itemsx()
    len_items = len(get_items)
    if len_items >= 1:
        await message.answer("<b>üí∞ All items and their positions</b>\n"
                                "‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ‚ûñ\n")
        for item in get_items:
            get_position = get_positionx("*", position_id=item[3])
            save_items.append(f"<code>{get_position[2]} - {item[2]}</code>")
        if len_items >= 20:
            count_split = round(len_items / 20)
            count_split = len_items // count_split
        if count_split > 1:
            get_message = split_messages(save_items, count_split)
            for msg in get_message:
                send_message = "\n".join(msg)
                await message.answer(send_message)
        else:
            send_message = "\n".join(save_items)
            await message.answer(send_message)
    else:
            await message.answer("<b>üí∞ Items are missing</b>")
